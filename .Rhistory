vapply(flags,class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmasse, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?
sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
sample(LETTERS, 10)
LETTERS
sample(LETTERS)
sample(c(0,1),100,replace = TRUE,prob = c(0.3, 0.7) )
flips <- sample(c(0,1),100,replace = TRUE,prob = c(0.3, 0.7) )
flips
sum(flips==1)
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean=100, sd=25)
?rpois
rpois(5,10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cd
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- strptime("October 17, 1986 08:24")
t3 <- "October 17, 1986 08:24"
t4 <-strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(carws)
plot(cars)
?plot
plot(cars$speed,cars$dist)
plot(cars$dist,cars$speed)
?plot
plot(cars$speed,cars$dist,xlab='Speed')
plot(cars$speed,cars$dist,xlab='Speed',ylab = "Stopping Distance")
plot(cars$speed,cars$dist,ylab ="Stopping Distance")
plot(cars$speed,cars$dist,xlab='Speed',ylab = "Stopping Distance")
plot(cars$speed,cars$dist,xlab='Speed',ylab = "Stopping Distance",main ="My Plot")
plot(cars,main ="My Plot")
?plot
plot(cars,sub="My Plot Subtitle")
plot(cars,col=2)
plot(cars,xlim = c(10, 15))
plot(cars,pch = 2)
load(mtcars)
mtcars
data(mtcars)
?boxplot
boxplot( formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
download.file(url
)
url = 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv'
file = download.file(url, method = 'curl')
if(!file.exists('data')){dir.create('data')}
download.file(url,dest='data/le.csv' method = 'curl')
download.file(url,dest='data/le.csv', method = 'curl')
dateDownloaded <- date()
lsdata <- read.csv('data/ls.csv')
lsdata <- read.csv('data/le.csv')
head lsdata
head(lsdata)
sum(lsdata[,val] )
sum(lsdata[,WORKSTAT] )
sum(lsdata[WORKSTAT,] )
lsdata[,val]
lsdata[,val]
lsdata[,"VAL"]
sum(lsdata[,"VAL"]>13)
nrow(lsdata[,"VAL"]>13)
nrow(lsdata[,"VAL"]>11)
nrow(lsdata[,"VAL"])
NROW(lsdata[,"VAL"])
NROW(lsdata[,"VAL"]>13)
lsdata[,"VAL"]>13
ls < -lsdata[,"VAL"]>13
ls <-lsdata[,"VAL"]>13
ls
length(lsdata[,"VAL"][lsdata[,"VAL"]>13])
a <- lsdata$VAL[!is.na(lsdata$VAL) & lsdata$VAL == 24]
length(a)
url2='https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx'
download.file(url2,dest='data/tse.xlsx',method='curl')
library(xlsx)
dat <- read.xlsx('data/tse.xlsx',sheetIndex = 1, colIndex = 7:15, rowIndex = 18:23)
sum(dat$Zip*dat$Ext,na.rm=T)
url3 = 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml'
download.file(url3,dest='data/ts.xml',method='curl')
library(XML)
doc <- xmlTreeParse(url3)
doc <- xmlTreeParse(url3,useInternal=TRUE)
doc <- xmlTreeParse('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml',useInternal=TRUE)
library(RCurl)
xData <- getURL(url3)
doc <- xmlParse(xData)
doc <- xmlTreeParse('http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml',useInternal=TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
rootNode[1]
rootNode[1][1]
rootNode[[1][1]]
rootNode[[1]
]
rootNode[[1]][[1]]
rootNode[[1]][[1]][[1]]
xmlSApply(rootNode,xmlValue)
rootNode[[1]][[1]][[1]]
rootNode[[1]][[1]]
xpathSApply(rootNode,'//zipcode',xmlValue)
k < -xpathSApply(rootNode,'//zipcode',xmlValue)
k <- xpathSApply(rootNode,'//zipcode',xmlValue)
l = k[k==21231]
l
length(l)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileUrl, destfile="./pid.csv", method="curl")
library(data.table)
install.packages('data.table')
library(data.table)
DT <- fread("./pid.csv")
file.info("./pid.csv")$size
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(mean(DT[DT$SEX==1,]$pwgtp15))+system.time(mean(DT[DT$SEX==2,]$pwgtp15))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(rowMeans(DT)[DT$SEX==1])+system.time(rowMeans(DT)[DT$SEX==2])
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time(mean(DT[DT$SEX==1,]$pwgtp15);mean(DT[DT$SEX==2,]$pwgtp15))
system.time(mean(DT[DT$SEX==1,]$pwgtp15))
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(rowMeans(DT)[DT$SEX==2])
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(mean(DT$pwgtp15,by=DT$SEX))
sum(dat$Zip*dat$Ext,na.rm=T)
system.time(mean(DT[DT$SEX==1,]$pwgtp15))+system.time(mean(DT[DT$SEX==2,]$pwgtp15))
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(rowMeans(DT)[DT$SEX==1])+system.time(rowMeans(DT)[DT$SEX==2])
download.file(fileUrl, destfile="data/pid.csv", method="curl")
DT <- fread("data/pid.csv")
length(DT)
file.info("data/pid.csv")$size
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(mean(DT[DT$SEX==1,]$pwgtp15))+system.time(mean(DT[DT$SEX==2,]$pwgtp15))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(rowMeans(DT)[DT$SEX==1])+system.time(rowMeans(DT)[DT$SEX==2])
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
getwd()
setwd('/Users/marcelwehrle/Projects/coursera/Cleaned
')
setwd('/Users/marcelwehrle/Projects/coursera/Cleaned')
getwd()
mkdir('data')
y_test <- data.table('data/test/y_test.txt')
#Load the needed Library's
library(data.table)
library(plyr)
#Load the datasources
subject_test <- data.table('data/test/subject_test.txt')
X_test <- data.table('data/test/X_test.txt')
y_test <- data.table('data/test/y_test.txt')
#Load the needed Library's
library(data.table)
library(plyr)
#Load the datasources
subject_test <- data.table('data/test/subject_test.txt')
X_test <- data.table('data/test/X_test.txt')
y_test <- data.table('data/test/y_test.txt')
#Load the needed Library's
library(data.table)
library(plyr)
#Load the datasources
subject_test <- data.table('data/test/subject_test.txt')
X_test <- data.table('data/test/X_test.txt')
y_test <- data.table('data/test/y_test.txt')
y_test <- data.table('data/test/y_test.txt')
all.x <- rbind(X_train,X_test)
all.y <- rbind(y_train,y_test)
#Load the needed Library's
library(data.table)
library(plyr)
#Load the datasources
subject_test <- data.table('data/test/subject_test.txt')
X_test <- data.table('data/test/X_test.txt')
y_test <- data.table('data/test/y_test.txt')
subject_train <- data.table('data/train/subject_train.txt')
X_train <- data.table('data/train/X_train.txt')
y_train <- data.table('data/train/y_train.txt')
#Merges the training and the test sets to create one data set
all.x <- rbind(X_train,X_test)
all.y <- rbind(y_train,y_test)
head(all.y)
all.y
X_train
subject_test <- data.table('data/test/subject_test.txt')
subject_test
subject_test <- data.table(data/test/subject_test.txt)
ls
getwd()
subject_test <- data.table('/data/test/subject_test.txt')
subject_test <- data.table('/data/test/subject_test.txsadt')
subject_test <- data.table('/data/test/subject_test.txt')
subject_test
subject_test <- data.table('data/test/subject_test.txt')
subject_test <- csv.read('data/test/subject_test.txt')
subject_test <- read.csv('data/test/subject_test.txt')
subject_test
colnames(all.x) <- c(as.character(features[,2]))
features<-read.table("data/features.txt")
colnames(all.x) <- c(as.character(features[,2]))
features
r(features[,2]
)
features[,2]
features
X_train <- data.table("data/train/X_train.txt")
X_train
X_train[,1]
X_train[,2]
test < -read.table("data/train/X_train.txt")
test <- read.table("data/train/X_train.txt")
y_test <- read.table("data/test/y_test.txt")
#Load the needed Library's
library(data.table)
library(plyr)
#Load the datasources
subject_test <- read.table("data/test/subject_test.txt")
X_test <- read.table("data/test/X_test.txt")
y_test <- read.table("data/test/y_test.txt")
subject_train <- read.table("data/train/subject_train.txt")
X_train <- read.table("data/train/X_train.txt")
y_train <- read.table("data/train/y_train.txt")
activity_lables<-read.table("data/activity_labels.txt")
features<-read.table("data/features.txt")
#Merges the training and the test sets to create one data set
all.x <- rbind(X_train,X_test)
all.y <- rbind(y_train,y_test)
colnames(all.x) <- c(as.character(features[,2]))
Mean<-grep("mean()",colnames(all.x),fixed=TRUE)
SD<-grep("std()",colnames(all.x),fixed=TRUE)
MeanSD<-all.x[,c(Mean,SD)]
MeanSD
#Load the needed Library's
library(data.table)
library(plyr)
subject_test <- read.table("data/test/subject_test.txt")
subject_train <- read.table("data/train/subject_train.txt")
activity_lables<-read.table("data/activity_labels.txt")
#Load and merge the training and the test sets to create one data set
all.x <- rbind(read.table("data/test/X_test.txt"),read.table("data/train/X_train.txt"))
all.y <- rbind(read.table("data/test/y_test.txt"), read.table("data/train/y_train.txt"))
features<-read.table("data/features.txt")
#Extracts only the measurements on the mean and standard deviation for each measurement.
cols.m.s <- c(grep("-std()",features[,2],fixed=TRUE), grep("-mean()",features[,2],fixed=TRUE))
all.x <- all.x[,cols.m.s]
colnames(all.x)<-features[,2][cols.m.s]
colnames(all.x)
all.x
activity_lables
all.y<-lapply(all.y, function(x) { activity_lables[x] })
all.y<-lapply(all.y, function(x) { activity_lables[x][,2] })
all.y<-lapply(all.y, function(x) { activity_lables[,2][x] })
all.y
all.activity<-cbind(all.y, all.x)
colnames(all.activity)[1] <- "Activity"
all.activity
all.activity<-cbind(all.y, all.x)
colnames(all.activity)
all.activity<-cbind(all.y, all.x)
colnames(all.activity)[1]
all.activity<-cbind(all.y, all.x)
colnames(all.activity)[1] <- "Activity"
all.activity<-cbind(all.y, all.x)
colnames(all.activity)[1]
all.activity<-cbind(all.y, all.x)
colnames(all.activity[1])
all.activity<-cbind(all.y, all.x)
colnames(all.activity[1]) <- 'sadf'
all.activity<-cbind(all.y, all.x)
colnames(all.activity[1])
all.activity[1]
# get subjects
subject_all<-rbind(read.table("./UCI HAR Dataset/train/subject_train.txt"), read.table("./UCI HAR Dataset/test/subject_test.txt"))
all<-cbind(subject_all, all.activity)
colnames(all)[1] <- "Subject"
#Load the needed Library's
library(data.table)
library(plyr)
#Load and merge the training and the test sets to create one data set
all.x <- rbind(read.table("data/test/X_test.txt"),read.table("data/train/X_train.txt"))
all.y <- rbind(read.table("data/test/y_test.txt"), read.table("data/train/y_train.txt"))
all.s <- rbind(read.table("data/test/subject_test.txt"),read.table("data/train/subject_train.txt"))
all.f<-read.table("data/features.txt")
#Extracts only the measurements on the mean and standard deviation for each measurement.
cols.m.s <- c(grep("-std()",all.f[,2],fixed=TRUE), grep("-mean()",all.f[,2],fixed=TRUE))
all.x <- all.x[,cols.m.s]
#Add the colnames
colnames(all.x)<-all.f[,2][cols.m.s]
all.y<-lapply(all.y, function(x) { activity_lables[,2][x] })
#combine everthing together
all <- cbind(all.y, all.x, all.s)
all
colnames(all)
names(all.y)
names(all.y) <- 'Activity'
names(all.y)
#Load the needed Library's
library(data.table)
library(plyr)
#Load and merge the training and the test sets to create one data set
all.x <- rbind(read.table("data/test/X_test.txt"),read.table("data/train/X_train.txt"))
all.y <- rbind(read.table("data/test/y_test.txt"), read.table("data/train/y_train.txt"))
all.s <- rbind(read.table("data/test/subject_test.txt"),read.table("data/train/subject_train.txt"))
all.f<-read.table("data/features.txt")
#Extracts only the measurements on the mean and standard deviation for each measurement.
cols.m.s <- c(grep("-std()",all.f[,2],fixed=TRUE), grep("-mean()",all.f[,2],fixed=TRUE))
all.x <- all.x[,cols.m.s]
# Transform ID's to Labels
all.y<-lapply(all.y, function(x) { activity_lables[,2][x] })
#Define the names
names(all.x)<-all.f[,2][cols.m.s]
names(all.y) <- 'Activity'
names(all.s) <- 'Subject'
#combine everthing together
all <- cbind(all.y, all.x, all.s)
colnames(all)
#Load the needed Library's
library(data.table)
library(plyr)
#Load and merge the training and the test sets to create one data set
all.x <- rbind(read.table("data/test/X_test.txt"),read.table("data/train/X_train.txt"))
all.y <- rbind(read.table("data/test/y_test.txt"), read.table("data/train/y_train.txt"))
all.s <- rbind(read.table("data/test/subject_test.txt"),read.table("data/train/subject_train.txt"))
all.f<-read.table("data/features.txt")
#Extracts only the measurements on the mean and standard deviation for each measurement.
cols.m.s <- c(grep("-std()",all.f[,2],fixed=TRUE), grep("-mean()",all.f[,2],fixed=TRUE))
all.x <- all.x[,cols.m.s]
# Transform ID's to Labels
all.y<-lapply(all.y, function(x) { activity_lables[,2][x] })
#Define the names
names(all.x)<-all.f[,2][cols.m.s]
names(all.y) <- 'Activity'
names(all.s) <- 'Subject'
#combine everthing together
all <- cbind(all.s,all.y, all.x)
tidy_data <- aggregate( all[,3] ~ Subject+Activity, data = all, FUN= "mean" )
tidy_data
#Load the needed Library's
library(data.table)
library(plyr)
#Load and merge the training and the test sets to create one data set
all.x <- rbind(read.table("data/test/X_test.txt"),read.table("data/train/X_train.txt"))
all.y <- rbind(read.table("data/test/y_test.txt"), read.table("data/train/y_train.txt"))
all.s <- rbind(read.table("data/test/subject_test.txt"),read.table("data/train/subject_train.txt"))
all.f<-read.table("data/features.txt")
#Extracts only the measurements on the mean and standard deviation for each measurement.
cols.m.s <- c(grep("-std()",all.f[,2],fixed=TRUE), grep("-mean()",all.f[,2],fixed=TRUE))
all.x <- all.x[,cols.m.s]
# Transform ID's to Labels
all.y<-lapply(all.y, function(x) { activity_lables[,2][x] })
#Define the names
names(all.x)<-all.f[,2][cols.m.s]
names(all.y) <- 'Activity'
names(all.s) <- 'Subject'
#combine everthing together
all <- cbind(all.s,all.y, all.x)
tidy_data <- aggregate( all[,3] ~ Subject+Activity, data = all, FUN= "mean" )
for(i in 3:ncol(all)){
tidy_data[,i] <- aggregate( all[,i] ~ Subject+Activity, data = all, FUN= "mean" )
}
#Load the needed Library's
library(data.table)
library(plyr)
#Load and merge the training and the test sets to create one data set
all.x <- rbind(read.table("data/test/X_test.txt"),read.table("data/train/X_train.txt"))
all.y <- rbind(read.table("data/test/y_test.txt"), read.table("data/train/y_train.txt"))
all.s <- rbind(read.table("data/test/subject_test.txt"),read.table("data/train/subject_train.txt"))
all.f<-read.table("data/features.txt")
#Extracts only the measurements on the mean and standard deviation for each measurement.
cols.m.s <- c(grep("-std()",all.f[,2],fixed=TRUE), grep("-mean()",all.f[,2],fixed=TRUE))
all.x <- all.x[,cols.m.s]
# Transform ID's to Labels
all.y<-lapply(all.y, function(x) { activity_lables[,2][x] })
#Define the names
names(all.x)<-all.f[,2][cols.m.s]
names(all.y) <- 'Activity'
names(all.s) <- 'Subject'
#combine everthing together
all <- cbind(all.s,all.y, all.x)
for(i in 3:ncol(all)){
tidy_data[,i] <- aggregate( all[,i] ~ Subject+Activity, data = all, FUN= "mean" )
}
#Load the needed Library's
library(data.table)
library(plyr)
#Load and merge the training and the test sets to create one data set
all.x <- rbind(read.table("data/test/X_test.txt"),read.table("data/train/X_train.txt"))
all.y <- rbind(read.table("data/test/y_test.txt"), read.table("data/train/y_train.txt"))
all.s <- rbind(read.table("data/test/subject_test.txt"),read.table("data/train/subject_train.txt"))
all.f<-read.table("data/features.txt")
#Extracts only the measurements on the mean and standard deviation for each measurement.
cols.m.s <- c(grep("-std()",all.f[,2],fixed=TRUE), grep("-mean()",all.f[,2],fixed=TRUE))
all.x <- all.x[,cols.m.s]
# Transform ID's to Labels
all.y<-lapply(all.y, function(x) { activity_lables[,2][x] })
#Define the names
names(all.x)<-all.f[,2][cols.m.s]
names(all.y) <- 'Activity'
names(all.s) <- 'Subject'
#combine everthing together
all <- cbind(all.s,all.y, all.x)
tidy_data <- aggregate( all[,3] ~ Subject+Activity, data = all, FUN= "mean" )
for(i in 4:ncol(all)){
tidy_data[,i] <- aggregate( all[,i] ~ Subject+Activity, data = all, FUN= "mean" )[,3]
}
tidy_data
head(tidy_data)
colnames(tidy_data)[3:ncol(tidy_data)] <- colnames(all.x)
head(tidy_data)
tidy_data <- aggregate( all ~ Subject+Activity, data = all, FUN= "mean" )
for(i in 3:ncol(all)){
tidy_data[,i] <- aggregate( all[,i] ~ Subject+Activity, data = all, FUN= "mean" )
}
warnings()
head(tidy_data)
tidy_data[,3] <- aggregate( all[,3] ~ Subject+Activity, data = all, FUN= "mean" )
tidy_data <- aggregate( all[,3] ~ Subject+Activity, data = all, FUN= "mean" )
tidy_data[,4] <- aggregate( all[,4] ~ Subject+Activity, data = all, FUN= "mean" )
tidy_data[,4] <- aggregate( all[,4] ~ Subject+Activity, data = all, FUN= "mean" )[,3]
tidy_data
tidy_data <- all[,c(1,2)]
head(tidy_data)
for(i in 3:ncol(all)){
tidy_data[,i] <- aggregate( all[,i] ~ Subject+Activity, data = all, FUN= "mean" )[,3]
}
test<- aggregate(all, by = list(all[,1],all[,2]), mean )
test<- aggregate(all, by = list(all[,1],all[,2]), mean )
all[,1]
all[,2]
warnings()
summary(all)
tidy_data <- aggregate( all[,3:ncol(all)] ~ Subject+Activity, data = all, FUN= "mean" )
tidy_data <- aggregate( all[,3:20] ~ Subject+Activity, data = all, FUN= "mean" )
